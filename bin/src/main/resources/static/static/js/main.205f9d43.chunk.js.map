{"version":3,"sources":["reportWebVitals.ts","Components/AuthArea/AuthBigBoys/AuthBigBoys.tsx","Redux/AuthState.ts","Components/LayoutArea/Footer/Footer.tsx","Redux/CompanyState.ts","Redux/CouponsState.ts","Redux/CustomerState.ts","Redux/Store.ts","Components/AuthArea/AuthCustomer/AuthCustomer.tsx","services/Notifications.ts","Components/DisplayArea/MyArea/MyArea.tsx","Models/UserModel.ts","Components/LayoutArea/Header/Header.tsx","services/Globals.ts","Components/AuthArea/Login/Login.tsx","Components/AuthArea/Logout/Logout.tsx","Components/CouponsArea/CouponCard/CouponCard.tsx","Components/CouponsArea/CategoryCoupons/CategoryCoupons.tsx","services/JwtAxios.ts","Components/CouponsArea/FullCouponDetails/FullCouponDetails.tsx","Components/DisplayArea/Admin/AddCompany/AddCompany.tsx","Components/DisplayArea/Admin/AddCustomer/AddCustomer.tsx","Components/DisplayArea/OperationCard/OperationCard.tsx","Components/DisplayArea/Admin/AdminDisplay/AdminDisplay.tsx","Components/DisplayArea/Admin/CompanyCard/CompanyCard.tsx","Components/DisplayArea/Admin/DeleteCompany/DeleteCompany.tsx","Components/DisplayArea/Admin/CustomerCard/CustomerCard.tsx","Components/DisplayArea/Admin/DeleteCustomer/DeleteCustomer.tsx","Components/DisplayArea/Admin/UpdateCompany/UpdateCompany.tsx","Components/DisplayArea/Admin/UpdateCompanyForm/UpdateCompanyForm.tsx","Components/DisplayArea/Admin/UpdateCustomer/UpdateCustomer.tsx","Components/DisplayArea/Admin/UpdateCustomerForm/UpdateCustomerForm.tsx","Models/CouponModel.ts","Components/DisplayArea/Company/AddCoupon/AddCoupon.tsx","Components/DisplayArea/Company/CompanyDisplay/CompanyDisplay.tsx","Components/DisplayArea/Company/UpdateCouponform/UpdateCouponform.tsx","Components/DisplayArea/Customer/CustomerDisplay/CustomerDisplay.tsx","Components/SharedArea/Page404/Page404.tsx","Components/CouponsArea/CategoryCard/CategoryCard.tsx","Components/LayoutArea/Home/Home.tsx","Components/LayoutArea/Routing/Routing.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AuthBigBoys","AuthActionType","className","to","Footer","Typography","variant","Component","AuthState","user","storedUser","JSON","parse","localStorage","getItem","this","loginAction","type","Login","payload","CompaniesActionType","CompanyState","companies","companiesDownloadedAction","CompanyDownloaded","companyAddedAction","company","CompanyAdded","companyUpdatedAction","CompanyUpdated","CouponsActionType","CouponsState","coupons","couponsDownloadedAction","CouponsDownloaded","couponAddedAction","coupon","CouponAdded","couponUpdatedAction","CouponUpdated","CustomerActionType","CustomerState","customers","customersDownloadedAction","CustomerDownloaded","customerAddedAction","customer","CustomerAdded","customerUpdatedAction","CustomerUpdated","reducers","combineReducers","couponsState","index","currentState","action","newState","includes","push","findIndex","element","id","CouponDeleted","splice","authState","setItem","stringify","Logout","removeItem","companyState","CompanyDeleted","customerState","CustomerDeleted","store","createStore","AuthCustomer","useState","getState","setUser","useEffect","unSubscribeMe","subscribe","name","notify","notification","Notyf","dismissible","duration","position","x","y","types","background","message","success","err","extractMessage","error","response","data","Array","isArray","MyArea","ClientType","history","useHistory","Button","color","onClick","clientType","toString","toLowerCase","startIcon","AccountBox","style","textTransform","Header","Globals","globals","urls","categoryCoupons","login","images","addCompany","deleteCompany","updateCompany","getAllCompanies","addCustomer","getAllCustomers","updateCustomer","deleteCustomer","addCoupon","getAllCoupons","updateCoupon","deleteCoupon","addImage","getCustomerDetails","getCustomerCoupons","purchaseCoupon","addCustomerAsGuest","useStyles","makeStyles","root","left","top","backgroundColor","props","classes","passwordShown","setPasswordShown","useForm","register","handleSubmit","credentials","a","endUrl","email","password","ADMINISTRATOR","COMPANY","CUSTOMER","axios","post","dispatch","categoryName","words","charAt","toUpperCase","slice","replace","split","i","length","substr","join","niceString","onSubmit","FormControl","InputLabel","htmlFor","Input","aria-describedby","IconButton","LockOpen","theme","createStyles","cardStyle","width","media","height","paddingTop","title","fontSize","marginBottom","paddingBottom","description","marginTop","content","textAlign","myButtons","justifyContent","CouponCard","location","useLocation","amount","cust","find","c","undefined","Card","imageName","CardMedia","image","CardHeader","titleTypographyProps","CardContent","price","date","d","Date","month","getMonth","day","getDate","year","getFullYear","taskDate","endDate","pathname","CardActions","myUpdateFunction","myDeleteFunction","CategoryCoupons","state","category","match","params","get","forEach","setState","console","log","filter","map","jwtAxios","create","interceptors","request","use","headers","token","buttons","FullCouponDetails","setCoupon","put","storageCoupon","subheader","startDate","answer","showAmount","currentUser","toShowOrNotToShow","goBack","AddCompany","addedCompany","required","inputProps","minLength","maxLength","FormHelperText","size","AddCustomer","userType","firstName","lastName","OperationCard","operation","AdminDisplay","compsAndCustsFetched","setCompsAndCustsFetched","getCompanies","getCustomers","CompanyCard","myFunction","children","DeleteCompany","setCompanies","handleDelete","delete","Delete","CustomerCard","DeleteCustomer","setCustomers","UpdateCompany","goToForm","Build","UpdateCompanyForm","setValue","parseInt","setCompany","checkChanges","companyToUpdate","handleUpdate","updatedCompany","storageCompany","defaultValue","UpdateCustomer","UpdateCustomerForm","Category","setCustomer","customerToUpdate","storageCustomer","updatedCustomer","dates","margin","spacing","minWidth","AddCoupon","value","myFormData","FormData","append","toISOString","item","addedCoupon","setTimeout","encType","Select","labelId","onChange","event","target","MenuItem","FOOD","ELECTRICITY","RESTAURANT","VACATION","shrink","min","step","component","hidden","accept","CompanyDisplay","details","setDetails","setCoupons","couponsFetched","setCouponsFetched","categoryValue","setCategoryValue","priceValue","setPriceValue","getCoupons","goToUpdateForm","myCoupons","maxPrice","showCoupons","UpdateCouponform","couponToUpdate","trim","validateDates","updatedCoupon","CustomerDisplay","customerFetched","setCustomerFetched","getCustomer","Page404","CategoryCard","Home","exact","Power","FastfoodTwoTone","Restaurant","CardTravelTwoTone","Routing","path","render","from","Layout","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.205f9d43.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { NavLink } from \"react-router-dom\";\nimport \"./AuthBigBoys.css\";\n\n/**\n * Allows logging in as an admin or company\n * @returns \n */\nfunction AuthBigBoys(): JSX.Element {\n    return (\n        <div className=\"AuthBigBoys\">\n            Log in as &nbsp;\n\t\t    <NavLink to=\"/login/admin\">Admin</NavLink>\n            &nbsp; | &nbsp;\n\t\t    <NavLink to=\"/login/company\">Company</NavLink>\n        </div>\n    );\n}\n\nexport default AuthBigBoys;\n","import UserModel from \"../Models/UserModel\";\r\n\r\n\r\nexport class AuthState {\r\n    public user: UserModel = null;\r\n    public constructor() {\r\n        const storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n        if (storedUser) {\r\n            this.user = storedUser;\r\n        }\r\n    }\r\n}\r\n\r\n// Auth action types:\r\nexport enum AuthActionType {\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n//Auth action:\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any; //The ? is for the Logout (payload = usermodel)\r\n}\r\n\r\n//Action creators:\r\nexport function loginAction(user: UserModel): AuthAction {\r\n    return { type: AuthActionType.Login, payload: user };\r\n}\r\nexport function logoutAction(): AuthAction {\r\n    return { type: AuthActionType.Logout };\r\n}\r\n\r\nexport function authReducer(currentState: AuthState = new AuthState(), action: AuthAction): AuthState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Login://Here the payload is logged user sent from the server\r\n            newState.user = action.payload;\r\n            localStorage.setItem(\"user\", JSON.stringify(newState.user)); //saving in the local storage (won't be deleted)\r\n            break;\r\n        case AuthActionType.Logout: // Here we don't have payload!\r\n            newState.user = null;\r\n            localStorage.removeItem(\"user\"); // clear user from the  local storage.\r\n            break;\r\n    }\r\n    return newState;\r\n}","import { Component } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport \"./Footer.css\";\nimport AuthBigBoys from \"../../AuthArea/AuthBigBoys/AuthBigBoys\";\n\nclass Footer extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Footer\">\n                <span>\n                    <AuthBigBoys />\n                </span>\n                <Typography className=\"copy\" variant=\"subtitle2\">&copy; Gil Sharon</Typography>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import CompanyModel from \"../Models/CompanyModel\";\r\n\r\n\r\nexport class CompanyState {\r\n    public companies: CompanyModel[] = [];\r\n}\r\n\r\nexport enum CompaniesActionType {\r\n\r\n    CompanyDownloaded = \"CompanyDownloaded\",\r\n    CompanyAdded = \"CompanyAdded\",\r\n    CompanyUpdated = \"CompanyUpdated\",\r\n    CompanyDeleted = \"CompanyDeleted\"\r\n}\r\n\r\nexport interface CompanyAction {\r\n    type: CompaniesActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function companiesDownloadedAction(companies: CompanyModel[]): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyDownloaded, payload: companies };\r\n}\r\n\r\nexport function companyAddedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyAdded, payload: company };\r\n}\r\n\r\nexport function companyUpdatedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyUpdated, payload: company };\r\n}\r\n\r\nexport function companyDeletedAction(id: number): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyDeleted, payload: id };\r\n}\r\n\r\nexport function companyReducer(currentState: CompanyState = new CompanyState(),\r\n    action: CompanyAction): CompanyState {\r\n\r\n    const newState = { ...currentState }; //Spread Operator - שכפול האובייקט\r\n\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CompaniesActionType.CompanyDownloaded:\r\n            newState.companies = action.payload;\r\n            break;\r\n        case CompaniesActionType.CompanyAdded:\r\n            newState.companies.push(action.payload);\r\n            break;\r\n        case CompaniesActionType.CompanyUpdated:\r\n            index = newState.companies.findIndex(element => element.id === action.payload.id);\r\n            newState.companies[index] = action.payload;\r\n            break;\r\n        case CompaniesActionType.CompanyDeleted:\r\n            index = newState.companies.findIndex(element => element.id === action.payload);\r\n            newState.companies.splice(index, 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import CouponModel from \"../Models/CouponModel\";\r\n\r\n\r\nexport class CouponsState {\r\n    public coupons: CouponModel[] = [];\r\n}\r\n\r\nexport enum CouponsActionType {\r\n\r\n    CouponsDownloaded = \"CouponsDownloaded\",\r\n    CouponAdded = \"CouponAdded\",\r\n    CouponUpdated = \"CouponUpdated\",\r\n    CouponDeleted = \"CouponDeleted\"\r\n}\r\n\r\nexport interface CouponAction {\r\n    type: CouponsActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function couponsDownloadedAction(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponsActionType.CouponsDownloaded, payload: coupons };\r\n}\r\n\r\nexport function couponAddedAction(coupon: CouponModel): CouponAction {\r\n    return { type: CouponsActionType.CouponAdded, payload: coupon };\r\n}\r\n\r\nexport function couponUpdatedAction(coupon: CouponModel): CouponAction {\r\n    return { type: CouponsActionType.CouponUpdated, payload: coupon };\r\n}\r\n\r\nexport function couponDeletedAction(id: number): CouponAction {\r\n    return { type: CouponsActionType.CouponDeleted, payload: id };\r\n}\r\n\r\nexport function couponsReducer(currentState: CouponsState = new CouponsState(), action: CouponAction): CouponsState {\r\n\r\n    const newState = { ...currentState }; //Spread Operator - שכפול האובייקט\r\n\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CouponsActionType.CouponsDownloaded:\r\n            newState.coupons = action.payload;\r\n            break;\r\n        case CouponsActionType.CouponAdded:\r\n            //add to state if the coupon isn't there\r\n            if (!newState.coupons.includes(action.payload)) {\r\n                newState.coupons.push(action.payload);\r\n            }\r\n            break;\r\n        case CouponsActionType.CouponUpdated:\r\n            index = newState.coupons.findIndex(element => element.id === action.payload.id);\r\n            newState.coupons[index] = action.payload;\r\n            break;\r\n        case CouponsActionType.CouponDeleted:\r\n            index = newState.coupons.findIndex(element => element.id === action.payload);\r\n            newState.coupons.splice(index, 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import CustomerModel from \"../Models/CustomerModel\";\r\n\r\n\r\nexport class CustomerState {\r\n    public customers: CustomerModel[] = [];\r\n}\r\n\r\nexport enum CustomerActionType {\r\n\r\n    CustomerDownloaded = \"CustomerDownloaded\",\r\n    CustomerAdded = \"CustomerAdded\",\r\n    CustomerUpdated = \"CustomerUpdated\",\r\n    CustomerDeleted = \"CustomerDeleted\"\r\n}\r\n\r\nexport interface CustomerAction {\r\n    type: CustomerActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function customersDownloadedAction(customers: CustomerModel[]): CustomerAction {\r\n    return { type: CustomerActionType.CustomerDownloaded, payload: customers };\r\n}\r\n\r\nexport function customerAddedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomerActionType.CustomerAdded, payload: customer };\r\n}\r\n\r\nexport function customerUpdatedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomerActionType.CustomerUpdated, payload: customer };\r\n}\r\n\r\nexport function customerDeletedAction(id: number): CustomerAction {\r\n    return { type: CustomerActionType.CustomerDeleted, payload: id };\r\n}\r\n\r\n\r\n// Customer\r\n// customer\r\nexport function customerReducer(currentState: CustomerState = new CustomerState(),\r\n    action: CustomerAction): CustomerState {\r\n\r\n    const newState = { ...currentState }; //Spread Operator - שכפול האובייקט\r\n\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CustomerActionType.CustomerDownloaded:\r\n            newState.customers = action.payload;\r\n            break;\r\n        case CustomerActionType.CustomerAdded:\r\n            newState.customers.push(action.payload);\r\n            break;\r\n        case CustomerActionType.CustomerUpdated:\r\n            index = newState.customers.findIndex(element => element.id === action.payload.id);\r\n            newState.customers[index] = action.payload;\r\n            break;\r\n        case CustomerActionType.CustomerDeleted:\r\n            index = newState.customers.findIndex(element => element.id === action.payload);\r\n            newState.customers.splice(index, 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}","import { combineReducers, createStore } from \"redux\";\r\nimport { authReducer } from \"./AuthState\";\r\nimport { companyReducer } from \"./CompanyState\";\r\nimport { couponsReducer } from \"./CouponsState\";\r\nimport { customerReducer } from \"./CustomerState\";\r\n\r\nconst reducers = combineReducers({ couponsState: couponsReducer, authState: authReducer,\r\n     companyState: companyReducer, customerState: customerReducer });\r\nconst store = createStore(reducers);\r\n\r\n\r\nexport default store;\r\n","import { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport UserModel from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport \"./AuthCustomer.css\";\n\n/**\n * Allows logging in as a customer\n * @returns \n */\nfunction AuthCustomer(): JSX.Element {\n\n    let [user, setUser] = useState<UserModel>(store.getState().authState.user);\n\n    \n    // Subscribes to the store and gets the user details every time there is a change in the AuthState\n    useEffect(() => {\n    let unSubscribeMe = \n        store.subscribe(() => {\n            setUser(store.getState().authState.user);\n        })\n        return function cleanup(){\n            unSubscribeMe();\n        };\n    });\n\n    return (\n        <div className=\"AuthCustomer\">\n            {\n                user && <>\n                    <span>Hello {user.name}</span>\n                    <span> | </span>\n                    <NavLink to=\"/logout\">Logout</NavLink>\n                </>\n            }\n            {\n                !user && <>\n                    <span>Hello Guest</span>\n                    <span> | </span>\n                    <NavLink to=\"/login/customer\">Login</NavLink>\n                    <span> | </span>\n                    <NavLink to=\"/admin/add/customer\">Register</NavLink>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default AuthCustomer;\n","import { Notyf } from \"notyf\";\r\n\r\nclass Notify {\r\n\r\n    private notification = new Notyf({\r\n        dismissible: true, duration: 2500, position: { x: \"left\", y: \"top\" }, types: [\r\n            {\r\n                type: 'success',\r\n                background: \"LightSkyBlue\",\r\n            },\r\n            {\r\n                type: 'error',\r\n                background: 'Maroon'\r\n            }\r\n        ]\r\n    });\r\n\r\n\r\n\r\n    public success(message: string) {\r\n        this.notification.success(message);\r\n    }\r\n    public error(err: any) {\r\n        const message = this.extractMessage(err);\r\n        this.notification.error(message);\r\n\r\n    }\r\n\r\n    private extractMessage(err: any): string {\r\n\r\n        if (typeof err?.response?.data?.message == \"string\") {\r\n            return err.response.data.message;\r\n        }\r\n        if (typeof err === \"string\") {\r\n            return err;\r\n        }\r\n        if (typeof err.response?.data == \"string\") {\r\n            return err.response.data;\r\n        }\r\n\r\n        if (Array.isArray(err.response?.data)) {\r\n            return err.response?.data[0];\r\n        }\r\n        // must be last\r\n        if (typeof err?.message === \"string\") {\r\n            return err.message;\r\n        }\r\n        return \"Some error occurred, please try again.\"\r\n    }\r\n}\r\n\r\nconst notify = new Notify();\r\n\r\nexport default notify;\r\n","import { Button } from \"@material-ui/core\";\nimport { AccountBox } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router\";\nimport store from \"../../../Redux/Store\";\nimport notify from \"../../../services/Notifications\";\nimport \"./MyArea.css\";\n\nfunction MyArea(): JSX.Element {\n\n    let history = useHistory();\n\n    /**\n     * chack if the user is looged in and if do, then send it to his own area.(depending on his client type)\n     */\n    function isLoggedIn() {\n        if (!store.getState().authState.user) {\n            notify.error(\"please log in\")\n            history.push(\"/home\");\n        } else {\n            history.push(\"/\" + store.getState().authState.user.clientType.toString().toLowerCase());\n        }\n    };\n\n    return (\n        <div className=\"MyArea\">\n            <Button color=\"primary\" onClick={isLoggedIn} startIcon={<AccountBox />} style={{ textTransform: \"none\" }} variant=\"outlined\">My Area</Button>\n        </div>\n    );\n}\n\nexport default MyArea;\n","\r\nexport enum ClientType{\r\n    ADMINISTRATOR=\"ADMINISTRATOR\",COMPANY=\"COMPANY\",CUSTOMER=\"CUSTOMER\"\r\n}\r\n\r\nclass UserModel {\r\n\r\n    public id: number;\r\n    public name:string;\r\n    public email:string;\r\n    public password:string;\r\n    public token:string;\r\n    public clientType:ClientType;\r\n\r\n}\r\n\r\nexport default UserModel;","import { Component } from \"react\";\nimport \"./Header.css\";\nimport AuthCustomer from \"../../AuthArea/AuthCustomer/AuthCustomer\";\nimport MyArea from \"../../DisplayArea/MyArea/MyArea\";\n\nclass Header extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Header\">\n                <span className=\"Login\">\n                    <AuthCustomer />\n                </span>\n                <span className=\"MyArea\">\n                    <MyArea/>\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","//Globals settings which are the same for development and production\r\nclass Globals {\r\n\r\n}\r\n//Globals settings which are suitable only for development\r\nclass DevelopmentGlobals extends Globals {\r\n    public urls = {\r\n        categoryCoupons: \"http://localhost:8080/Guest/get/coupons/category/\",\r\n        login:\"http://localhost:8080/login\",\r\n        images: \"http://localhost:8080/\",\r\n        \r\n        //\r\n        //Admin Area\r\n        //\r\n        // Company\r\n        addCompany:\"http://localhost:8080/admin/add/company\",\r\n        deleteCompany:\"http://localhost:8080/admin/delete/company/\",\r\n        updateCompany:\"http://localhost:8080/admin/update/company\",\r\n        getAllCompanies:\"http://localhost:8080/admin/get/company/all\",\r\n        //Customer\r\n        addCustomer:\"http://localhost:8080/admin/add/customer\",\r\n        getAllCustomers:\"http://localhost:8080/admin/get/customer/all\",\r\n        updateCustomer:\"http://localhost:8080/admin/update/customer\",\r\n        deleteCustomer:\"http://localhost:8080/admin/delete/customer/\",\r\n        \r\n        //\r\n        //Company Area\r\n        //\r\n        \r\n        //Coupon\r\n        addCoupon:\"http://localhost:8080/company/add/coupon\",\r\n        getAllCoupons:\"http://localhost:8080/company/getCoupons\",\r\n        updateCoupon:\"http://localhost:8080/company/update/coupon\",\r\n        deleteCoupon:\"http://localhost:8080/company/delete/coupon/\",\r\n        addImage:\"http://localhost:8080/uploadFile\",\r\n\r\n        //\r\n        // Customer Area\r\n        //\r\n        getCustomerDetails:\"http://localhost:8080/customer/get/customer/details\",\r\n        getCustomerCoupons:\"http://localhost:8080/customer/get/coupons/all\",\r\n        purchaseCoupon:\"http://localhost:8080/customer/purchase-coupon/\",\r\n        \r\n        //\r\n        // Guest Area\r\n        //\r\n        addCustomerAsGuest:\"http://localhost:8080/Guest/add/customer/\"\r\n    };\r\n}\r\n\r\n//Globals settings which are suitable only for production\r\nclass ProductionGlobals extends Globals {\r\n    public urls = {\r\n        categoryCoupons: \"http://localhost:8080/Guest/get/coupons/category/\",\r\n        login:\"http://localhost:8080/login\",\r\n        images: \"http://localhost:8080/\",\r\n\r\n        //\r\n        // Admin Area\r\n        //\r\n        \r\n        //company\r\n        addCompany:\"http://localhost:8080/admin/add/company\",\r\n        deleteCompany:\"http://localhost:8080/admin/delete/company/\",\r\n        updateCompany:\"http://localhost:8080/admin/update/company\",\r\n        getAllCompanies:\"http://localhost:8080/admin/get/company/all\",\r\n        //Customer\r\n        addCustomer:\"http://localhost:8080/admin/add/customer\",\r\n        getAllCustomers:\"http://localhost:8080/admin/get/customer/all\",\r\n        updateCustomer:\"http://localhost:8080/admin/update/customer\",\r\n        deleteCustomer:\"http://localhost:8080/admin/delete/customer/\",\r\n       \r\n        //\r\n        //Company Area\r\n        //\r\n        \r\n        //Coupon\r\n        addCoupon:\"http://localhost:8080/company/add/coupon\",\r\n        getAllCoupons:\"http://localhost:8080/company/getCoupons\",\r\n        updateCoupon:\"http://localhost:8080/company/update/coupon\",\r\n        deleteCoupon:\"http://localhost:8080/company/delete/coupon/\",\r\n        addImage:\"http://localhost:8080/uploadFile\",\r\n        \r\n        //\r\n        // Customer Area\r\n        //\r\n        getCustomerDetails:\"http://localhost:8080/customer/get/customer/details\",\r\n        getCustomerCoupons:\"http://localhost:8080/customer/get/coupons/all\",\r\n        purchaseCoupon:\"http://localhost:8080/customer/purchase-coupon/\",\r\n        //\r\n        // Guest Area\r\n        //\r\n        addCustomerAsGuest:\"http://localhost:8080/Guest/add/customer/\"\r\n        \r\n    };\r\n}\r\n\r\nconst globals = process.env.NODE_ENV === \"development\" ? new DevelopmentGlobals() : new ProductionGlobals();\r\n\r\nexport default globals;\r\n\r\n\r\n","import { NavLink, useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport CredentialsModel from \"../../../Models/CredentialsModel\";\nimport \"./Login.css\";\nimport axios from \"axios\";\nimport UserModel, { ClientType } from \"../../../Models/UserModel\";\nimport globals from \"../../../services/Globals\";\nimport store from \"../../../Redux/Store\";\nimport { loginAction } from \"../../../Redux/AuthState\";\nimport { Button, FormControl, Input, InputLabel, makeStyles, IconButton } from \"@material-ui/core\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { Home, LockOpen } from \"@material-ui/icons\";\nimport notify from \"../../../services/Notifications\";\nimport { useState } from \"react\";\n\ninterface LoginProps {\n    type: ClientType;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"80%\",\n        top: \"12.5%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n/**\n * Submit user credentials  to the server in order to validate user.\n * If validated , dispatches the details to the authState and transfers the user to his personal area \n * @param props Client Type\n * @returns \n */\nfunction Login(props: LoginProps): JSX.Element {\n\n    const classes = useStyles();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    let history = useHistory();//redirect to function\n\n    let { register, handleSubmit } = useForm<CredentialsModel>();\n\n    /**\n     * get email & password from the form and user type from the props\n     * and send it to the backend, there it will be validated\n     * @param credentials \n     */\n    async function send(credentials: CredentialsModel) {\n        if (store.getState().authState.user) {\n            notify.error(\"You are already logged in. Please logout first.\")\n        } else {\n            try {\n                //concatenates the email, password and the client type to a string (URL)\n                let endUrl = \"?email=\" + credentials.email + \"&password=\" + credentials.password;\n\n                switch (props.type) {\n                    case ClientType.ADMINISTRATOR:\n                        endUrl += \"&type=\" + ClientType.ADMINISTRATOR;\n                        break;\n                    case ClientType.COMPANY:\n                        endUrl += \"&type=\" + ClientType.COMPANY;\n                        break;\n                    case ClientType.CUSTOMER:\n                        endUrl += \"&type=\" + ClientType.CUSTOMER;\n                        break;\n                }\n                // pass the data to the backend\n                let response = await axios.post<UserModel>(globals.urls.login + endUrl, credentials);\n                store.dispatch(loginAction(response.data))\n                notify.success(\"you have been successfully logged in\");\n                history.push(\"/\" + props.type.toString().toLowerCase());\n\n            } catch (error) {\n                notify.error(error)\n            }\n        }\n    }\n\n    /**\n     * make each word began with capital letter\n     * @param categoryName \n     * @returns string\n     */\n    function niceString(categoryName: string): string {\n        categoryName = categoryName.toLowerCase();\n        categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n        categoryName = categoryName.replace('_', ' ')\n        let words = categoryName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n    }\n\n    return (\n        <div className=\"Login \">\n\n            <h2>Login as {niceString(props.type)}</h2>\n\n            <form onSubmit={handleSubmit(send)}>\n\n\n                <FormControl>\n                    <InputLabel htmlFor=\"my-input\">User email</InputLabel>\n                    <Input id=\"email\" type=\"email\" aria-describedby=\"my-helper-text\" {...register('email')} />\n                </FormControl>\n                <br /><br />\n                <FormControl>\n                    <InputLabel htmlFor=\"my-input\">Password</InputLabel>\n                    <Input id=\"password\" type={passwordShown ? \"text\" : \"password\"} {...register('password')} />\n                    <IconButton className={classes.root} onClick={togglePasswordVisiblity} >{<VisibilityIcon />}</IconButton>\n                </FormControl>\n                <br /><br />\n\n                <Button type=\"submit\" startIcon={<LockOpen />} style={{ textTransform: \"none\" }} variant=\"outlined\">Login</Button>\n\n            </form>\n\n            <br />\n            <br />\n            <NavLink to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} color=\"primary\" variant=\"contained\">Home</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default Login;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { logoutAction } from \"../../../Redux/AuthState\";\nimport store from \"../../../Redux/Store\";\nimport notify from \"../../../services/Notifications\";\n\n/**\n * logout the user and dispatches the store accordingly\n */\nfunction Logout(): JSX.Element {\n   \n    const history = useHistory();\n\n    useEffect(()=>{\n        store.dispatch(logoutAction());\n        notify.success(\"you are now logged out.\");\n        history.push(\"/home\");\n    });\n\n    return null;\n}\n\nexport default Logout;\n","import { Button, Card, CardMedia, CardActions, CardContent, CardHeader, createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport { useLocation } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../services/Globals\";\nimport \"./CouponCard.css\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        cardStyle: {\n            width: 255,\n        },\n        media: {\n            height: 0,\n            paddingTop: '56.25%', // 16:9\n\n        },\n        title: {\n            fontSize: 14,\n            marginBottom: 0,\n            paddingBottom: 0\n        },\n        description: {\n            marginTop: 0,\n            paddingTop: 0\n        },\n        content: {\n            textAlign: \"left\"\n        },\n        myButtons: {\n            justifyContent: \"center\"\n        }\n\n    }));\n\ninterface CouponCardProps {\n    coupon: CouponModel;\n    myDeleteFunction?: Function;\n    myUpdateFunction?: Function;\n}\n\nfunction CouponCard(props: CouponCardProps): JSX.Element {\n\n    let classes = useStyles();\n    let location = useLocation();\n\n    //format  the date to dd/MM//yyyy\n    function taskDate(date: Date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n        if (month.length < 2)\n            month = '0' + month;\n        if (day.length < 2)\n            day = '0' + day;\n\n        return [day, month, year].join('-');\n    }\n\n\n    /**\n     * \n     * Only show the coupon if there is more than one (amount >0),\n     * it is the logged in company's coupon, or the admin is the user \n     */\n    const showCoupon = (): boolean => {\n        let user = store.getState().authState.user;\n        if (user?.clientType === ClientType.COMPANY && user.id === props.coupon.company.id)\n            return true;\n        if (user?.clientType === ClientType.ADMINISTRATOR)\n            return true;\n        if (props.coupon.amount > 0)\n            return true;\n        if (user?.clientType === ClientType.CUSTOMER) {\n            let cust = store.getState().customerState.customers.find((c) => c.id === user.id);\n            if (cust !== undefined) {\n                let matchCoupon = cust.coupons.find((c) => c.id === props.coupon.id);\n                if (matchCoupon !== undefined)\n                    return true;\n            }\n        }\n        return false;\n\n    }\n\n    return (\n        <div className=\"CouponCard\">\n            {showCoupon &&\n\n                <Card key={props.coupon.id} className={classes.cardStyle} >\n                    <NavLink key={props.coupon.id} to={\"/coupons/full-details/\" + props.coupon.id.toString()}>\n                        {props.coupon.imageName !== \"no_image\" &&\n                            <CardMedia\n                                className={classes.media}\n                                image={globals.urls.images +\n                                    props.coupon.imageName}\n                            />\n                        }\n\n                        <CardHeader className={classes.title} title={props.coupon.title} titleTypographyProps={{ variant: 'h6' }} />\n                        <CardContent className={classes.content}>\n                            <Typography className={classes.description} variant=\"body2\" color=\"textSecondary\">\n                                {props.coupon.description}\n                            </Typography>\n                            {\"Price: $\" + props.coupon.price}\n                            <br />\n                            {\"End date: \" + taskDate(props.coupon.endDate)}\n                            <br />\n                            {\"By: \" + props.coupon?.company.name}\n                        </CardContent>\n                    </NavLink>\n\n                    {\n                        location.pathname.toString() === \"/company\" &&\n                        <CardActions className={classes.myButtons}>\n                            <Button onClick={() => props.myUpdateFunction(props.coupon.id)} variant=\"contained\" color=\"primary\">Update</Button> &nbsp;\n                            <Button onClick={() => props.myDeleteFunction(props.coupon)} variant=\"contained\" color=\"secondary\" >Delete</Button>\n                        </CardActions>\n                    }\n\n                </Card>\n            }\n        </div>\n    );\n}\n\nexport default CouponCard;\n","import { Button, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport store from \"../../../Redux/Store\";\nimport { RouteComponentProps } from \"react-router\";\nimport globals from \"../../../services/Globals\";\nimport CouponCard from \"../CouponCard/CouponCard\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./CategoryCoupons.css\";\nimport { Home } from \"@material-ui/icons\";\nimport { couponAddedAction } from \"../../../Redux/CouponsState\";\n\ninterface CategoryCouponsState {\n    coupons: CouponModel[];\n\n}\n/**\n * The parameter passed by from the parent component via routing \n */\ninterface RouteParams {\n    category: string;\n}\n\ninterface CategoryCouponsProps extends RouteComponentProps<RouteParams> { }\n\n/**\n * displays all coupons from a given category\n */\nclass CategoryCoupons extends Component<CategoryCouponsProps, CategoryCouponsState> {\n\n    public async componentDidMount() {\n        try {\n            let category = this.props.match.params.category.toString();\n            let response = await axios.get<CouponModel[]>(globals.urls.categoryCoupons + category);\n            response.data.forEach((c) => (\n                store.dispatch(couponAddedAction(c))\n            ))\n            this.setState({ coupons: response.data });\n        } catch (error) {\n            console.log(error.message);\n\n        }\n    }\n\n\n    public constructor(props: CategoryCouponsProps) {\n        super(props);\n        this.state = { coupons: null };\n    }\n\n    public render(): JSX.Element {\n        /**\n        * make each word began with capital letter\n        * @param categoryName \n        * @returns string\n        */\n        function niceString(categoryName: string): string {\n            categoryName = categoryName.toLowerCase();\n            categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n            categoryName = categoryName.replace('_', ' ')\n            let words = categoryName.split(' ');\n            for (let i = 0; i < words.length; i++) {\n                words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n            }\n            return words.join(\" \");\n        }\n\n        return (\n            <div className=\"CategoryCoupons Scroller\">\n                <div >\n                    <Typography variant=\"h4\">{niceString(this.props.match.params.category.toString())} </Typography>\n                    <br /><br />\n                    {/* displays coupons with amount greater than 0  */}\n                    {this.state.coupons?.filter((c) => c.amount > 0).map(c => <CouponCard key={c.id} coupon={c} />)}\n                    <br />\n                    <br />\n\n                </div>\n                <NavLink to=\"/home\">\n                    <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"outlined\">Home</Button>\n                </NavLink>\n\n            </div >\n        );\n    }\n}\n\nexport default CategoryCoupons;\n","import  axios from 'axios';\r\nimport store from '../Redux/Store';\r\n\r\nconst jwtAxios = axios.create();\r\n\r\n//Request interceptor - sends the JWT token with each request\r\njwtAxios.interceptors.request.use(request=>{\r\n    request.headers={\r\n        \"token\":store.getState().authState.user?.token\r\n    };\r\n    \r\n    return request;\r\n});\r\n\r\nexport default jwtAxios;","import { Button, Card, CardActions, CardContent, CardHeader, createStyles, makeStyles, CardMedia, Theme, Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport { couponUpdatedAction } from \"../../../Redux/CouponsState\";\nimport { customerUpdatedAction } from \"../../../Redux/CustomerState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../services/Globals\";\nimport jwtAxios from \"../../../services/JwtAxios\";\nimport notify from \"../../../services/Notifications\";\nimport \"./FullCouponDetails.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface FullCouponDetailsProps extends RouteComponentProps<RouteParams> {\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        cardStyle: {\n            width: 350,\n        },\n        media: {\n            height: 0,\n            paddingTop: '56.25%', // 16:9\n\n        },\n        title: {\n            fontSize: 14,\n            marginBottom: 0,\n            paddingBottom: 0\n        },\n        description: {\n            marginTop: 0,\n            paddingTop: 0,\n\n        },\n        content: {\n            textAlign: \"left\"\n        },\n        buttons: {\n            justifyContent: \"center\"\n        }\n    }));\n\nfunction FullCouponDetails(props: FullCouponDetailsProps): JSX.Element {\n\n    let classes = useStyles();\n    let user = store.getState().authState?.user;\n\n    let history = useHistory();\n\n\n    let [coupon, setCoupon] = useState<CouponModel>(() => store.getState().couponsState.coupons.find((c) => (\n        c.id === +props.match.params.id)));\n\n    /**\n     * If the Client Type is a customer, passes the selected coupon to the server in order to make a purchase. \n     */\n    const purchaseCoupon = async () => {\n        if (store.getState().authState.user?.clientType === ClientType.CUSTOMER) {\n            try {\n                let response = await jwtAxios.put<CouponModel>(globals.urls.purchaseCoupon, coupon);\n                let customer = store.getState().customerState.customers.find((c) => c.id === user.id);\n                customer.coupons.push(response.data);\n                store.dispatch(couponUpdatedAction(response.data));\n                store.dispatch(customerUpdatedAction(customer));\n                notify.success(\"Coupon \" + coupon.title + \" purchased\");\n                history.push(\"/customer\");\n            } catch (error) {\n                notify.error(error);\n            }\n        } else {\n            notify.error(\"Please log in to continue purchase\")\n            history.push(\"/login/customer\");\n        }\n    }\n\n    // Insures a refresh does not crash the site by using a local storage\n    useEffect(() => {\n        //      downloads from local storage\n        if (coupon === undefined) {\n            let storageCoupon = localStorage.getItem(\"storage-coupon\");\n            if (storageCoupon !== 'undefined' && storageCoupon !== 'null') {\n                setCoupon(JSON.parse(storageCoupon));\n            }\n        } else {\n            // sends to local storage\n            localStorage.setItem(\"storage-coupon\", JSON.stringify(coupon));\n        }\n    })\n\n    //Gives the user vague amount of the selected coupon \n    const showAmount = (): string => {\n        let answer = \"No coupons left \";\n        if (coupon.amount >= 50) {\n            answer = \"More than 50 coupons are available\";\n        }\n        else if (coupon.amount < 50 && coupon.amount > 9) {\n            answer = \"Under 50 coupons left\";\n        }\n        else if (coupon.amount < 10 && coupon.amount > 1) {\n            answer = \"Under 10 coupons left\";\n        }\n        else if (coupon.amount === 1) {\n            answer = \"Last coupon left\";\n        }\n        return answer\n    }\n\n    //format  the date to dd/MM//yyyy\n    function taskDate(date: Date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n        if (month.length < 2)\n            month = '0' + month;\n        if (day.length < 2)\n            day = '0' + day;\n\n        return [day, month, year].join('-');\n    }\n\n    /**\n        * make each word began with capital letter\n        * @param categoryName \n        * @returns string\n        */\n    function niceString(categoryName: string): string {\n        categoryName = categoryName.toLowerCase();\n        categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n        categoryName = categoryName.replace('_', ' ')\n        let words = categoryName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n    }\n\n    /**\n     * Decides if to show or not to show the purchase button to the user.\n     * Return true if the client type is \"guest\" or customer that has not buy the coupon yet else return false.\n     * @returns \n     */\n    const toShowOrNotToShow = (): boolean => {\n        if (user?.clientType === ClientType.ADMINISTRATOR)\n            return false;\n        if (user?.clientType === ClientType.COMPANY)\n            return false;\n        // check if coupon already exist              \n        let currentUser = store.getState().customerState.customers.find(c => c.id === user?.id)\n        let coup = currentUser?.coupons.find((c) => c.id === +props.match.params.id)\n        if (coup)\n            return false;\n        return true;\n    }\n    return (\n        <div className=\"FullCouponDetails\">\n            {coupon &&\n                <Card key={coupon.id} className={classes.cardStyle}>\n                    {coupon.imageName !== \"no_image\" &&\n                        <CardMedia\n                            className={classes.media}\n                            image={globals.urls.images +\n                                coupon.imageName}\n                        />\n                    }\n                    <CardHeader className={classes.title} title={coupon.title} subheader={niceString(coupon.category)} />\n                    <CardContent className={classes.content} >\n                        <Typography className={classes.description} variant=\"body2\" color=\"textSecondary\">\n                            {coupon.description}\n                        </Typography>\n                        Company: {coupon?.company.name}\n                        <br />\n                        Start Date: &nbsp; {taskDate(coupon.startDate)}\n                        <br />\n                        End Date: &nbsp; {taskDate(coupon.endDate)}\n                        <br />\n                        {/* Show the amount only it is larger than 0 or the coupon belongs to the company */}\n                        {(coupon.amount > 0 || user?.clientType === ClientType.COMPANY) && <>\n                            Amount: &nbsp; {showAmount()}\n                            <br />\n                            <br />\n                        </>\n                        }\n\n                        <Typography variant=\"body1\">\n                            Price:  ${coupon.price}\n                        </Typography>\n                    </CardContent>\n                    {toShowOrNotToShow() &&\n                        <CardActions className={classes.buttons}>\n                            <Button\n                                onClick={() => purchaseCoupon()}\n                                variant=\"contained\" > Purchase </Button>\n                        </CardActions>\n                    }\n\n                </Card>\n            }\n            <br />\n            <Button variant=\"contained\" color=\"primary\" onClick={history.goBack}> Back</Button>\n\n        </div>\n    );\n}\n\nexport default FullCouponDetails;\n","import \"./AddCompany.css\";\nimport { Button, FormControl, FormHelperText, Input, InputLabel, IconButton, makeStyles } from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport store from \"../../../../Redux/Store\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { useForm } from \"react-hook-form\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport { NavLink } from \"react-router-dom\";\nimport notify from \"../../../../services/Notifications\";\nimport { companyAddedAction } from \"../../../../Redux/CompanyState\";\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"80%\",\n        top: \"12.5%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n\n/**\n *Displays a form to the admin to add a new company to the site.\n */\nfunction AddCompany(): JSX.Element {\n\n    let { register, handleSubmit } = useForm<CompanyModel>();\n    let history = useHistory();\n\n    const classes = useStyles();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n\n\n    const togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    useEffect(() => {\n        //if we don't have a user object or are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n    });\n\n    /**\n     * Receives the company data from the form. The function then sends the company\n     * as FormData to the server.\n     */\n    async function send(company: CompanyModel) {\n        try {\n            let response = await jwtAxios.post<CompanyModel>(globals.urls.addCompany, company);\n            const addedCompany = response.data;\n            store.dispatch(companyAddedAction(addedCompany));\n\n            notify.success(addedCompany.name + \" company added\")\n            history.push(\"/administrator\");\n        } catch (error) {\n            notify.error(error);\n\n        }\n    }\n\n\n    return (\n        <div className=\"AddCompany \">\n            <form onSubmit={handleSubmit(send)}>\n                <FormControl>\n                    <InputLabel>Company name</InputLabel>\n                    <Input id=\"name\" required type=\"text\"  {...register('name')} inputProps={{ minLength: 3, maxLength: 25 }} />\n                </FormControl>\n                <br />\n                <br />\n                <FormControl>\n                    <InputLabel >Email address</InputLabel>\n                    <Input id=\"email\" required type=\"email\"  {...register('email')} />\n                </FormControl>\n                <br />\n                <br />\n                <FormControl>\n                    <InputLabel>Company password</InputLabel>\n                    <Input id=\"password\" required type={passwordShown ? \"text\" : \"password\"} {...register('password')} inputProps={{ minLength: 3, maxLength: 15 }} />\n                    <IconButton className={classes.root} onClick={togglePasswordVisiblity} >{<VisibilityIcon />}</IconButton>\n                    <FormHelperText >We'll never share the password.</FormHelperText>\n                </FormControl>\n                <br />\n                <br />\n                <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n            </form>\n\n            <br />\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default AddCompany;\n","import { Button, FormControl, FormHelperText, Input, InputLabel,makeStyles,IconButton } from \"@material-ui/core\";\nimport { useEffect, useState  } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport notify from \"../../../../services/Notifications\";\nimport \"./AddCustomer.css\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles({\n    root:{\n        position: \"absolute\",\n        left:\"80%\",\n        top: \"15%\",\n        \"&:hover\":{\n            backgroundColor:\"transparent\"\n        }\n    }\n})\n\n/**\n *Displays a form to the admin to add a new customer to the site.\n */\nfunction AddCustomer(): JSX.Element {\n\n    let { register, handleSubmit } = useForm<CustomerModel>();\n    let history = useHistory();\n\n    const classes = useStyles();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n      };\n\n\n    let userType = store.getState().authState.user?.clientType;\n    useEffect(() => {\n        //if we don't have a user object or are not logged in\n        if (userType === ClientType.COMPANY || userType === ClientType.CUSTOMER) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n    });\n\n    /**\n     * Receives the customer data from the form. The function then sends the customer\n     * as FormData to the server.\n     */\n    async function send(customer: CustomerModel) {\n        try {\n            let response;\n            if (userType === ClientType.ADMINISTRATOR) {\n                response = await jwtAxios.post<CustomerModel>(globals.urls.addCustomer, customer);\n                history.push(\"/administrator\");\n            } else {\n                response = await axios.post<CustomerModel>(globals.urls.addCustomerAsGuest, customer);\n                history.push(\"/login/customer\");\n\n            }\n            notify.success(\"customer: \" + response.data.firstName + \" \" + response.data.lastName + \" added\")\n        } catch (error) {\n            notify.error(error);\n\n        }\n    }\n\n    return (\n        <div className=\"AddCustomer\">\n                <form onSubmit={handleSubmit(send)}>\n                    <FormControl>\n                        <InputLabel >Customer First Name</InputLabel>\n                        <Input id=\"firstName\" type=\"text\" required {...register('firstName')} inputProps={{minLength:3,maxLength:20}} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Customer Last Name</InputLabel>\n                        <Input id=\"lastName\" type=\"text\" required {...register('lastName')} inputProps={{minLength:3,maxLength:20}}/>\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Email Address</InputLabel>\n                        <Input id=\"email\" type=\"email\" required {...register('email')} />\n                        <FormHelperText >example@example.com</FormHelperText>\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Customer Password</InputLabel>\n                        <Input id=\"password\" type={passwordShown ? \"text\" : \"password\"} required {...register('password')} inputProps={{minLength:3,maxLength:15}} />\n                        <IconButton className={classes.root} onClick={togglePasswordVisiblity} >{<VisibilityIcon/>}</IconButton>\n                        <FormHelperText >We'll never share the password.</FormHelperText>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n                </form>\n\n            <br />  \n            <br />\n            <NavLink to={store.getState().authState.user?.clientType=== ClientType.ADMINISTRATOR? \"/administrator\":\"/home\"}>\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default AddCustomer;\n","import { Card, CardHeader } from \"@material-ui/core\";\nimport \"./OperationCard.css\";\n\ninterface OperationCardProps {\n    operation: string;\n}\n\nfunction OperationCard(props: OperationCardProps): JSX.Element {\n    return (\n        <div className=\"OperationCard\">\n            <Card>\n                <CardHeader title={props.operation}/>\n            </Card>\n        </div>\n    );\n}\n\nexport default OperationCard;\n","import { Button } from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction } from \"../../../../Redux/CompanyState\";\nimport { customersDownloadedAction } from \"../../../../Redux/CustomerState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport OperationCard from \"../../OperationCard/OperationCard\";\nimport \"./AdminDisplay.css\";\n\n/**\n * Displays the available operation for the admin\n */\nfunction AdminDisplay(): JSX.Element {\n\n    let history = useHistory();\n    let [compsAndCustsFetched,setCompsAndCustsFetched]= useState<boolean>(false);\n\n    /**\n     * gets the companies from the DB and dispatches it to the store\n     */\n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getAllCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    \n    /**\n     * gets the customers from the DB and dispatches it to the store\n     */\n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getAllCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        } \n        //gets the companies and the customers for the first time\n        else if (!compsAndCustsFetched) {\n                getCompanies();\n                getCustomers();\n                setCompsAndCustsFetched(true);\n            }\n        \n    }, []);\n\n    return (\n        <div className=\"AdminDisplay\">\n            {/* company */}\n            <NavLink to=\"/admin/add/company\"><OperationCard operation=\"Add Company\" /></NavLink>\n            <NavLink to=\"/admin/update/company\"><OperationCard operation=\"Update Company\" /></NavLink>\n            <NavLink to=\"/admin/delete/company\"><OperationCard operation=\"Delete Company\" /></NavLink>\n            <br />\n            <hr className=\"hr\"/>\n            {/* customer */}\n            <NavLink to=\"/admin/add/customer\"><OperationCard operation=\"Add Customer\" /></NavLink>\n            <NavLink to=\"/admin/update/customer\"><OperationCard operation=\"Update Customer\" /></NavLink>\n            <NavLink to=\"/admin/delete/customer\"><OperationCard operation=\"Delete Customer\" /></NavLink>\n            <br />\n            <br />\n            <br />\n            <NavLink to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"outlined\">Home</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default AdminDisplay;\n","import { Card, CardHeader, IconButton } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport \"./CompanyCard.css\";\n\ninterface CompanyCardProps {\n    company: CompanyModel;\n    children: ReactNode;\n    myFunction: Function;\n}\n\n/**\n * this card show details about the given company\n */\nfunction CompanyCard(props: CompanyCardProps): JSX.Element {\n    return (\n        <div className=\"CompanyCard\">\n            <Card key={props.company.id} >\n                <CardHeader action={\n                    <IconButton onClick={() => props.myFunction(props.company)\n                    }> {props.children} </IconButton>\n                }\n                    title={props.company.name}\n                    subheader={\"Contact info: \" + props.company.email} />\n            </Card>\n\n        </div>\n    );\n}\n\nexport default CompanyCard;\n","import { Button } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction, companyDeletedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport \"./DeleteCompany.css\";\n\n\n/**\n * Displays all the companies and let you chose which company you want to delete\n */\nfunction DeleteCompany(): JSX.Element {\n\n    let [companies, setCompanies] = useState<CompanyModel[]>(store.getState().companyState.companies);\n\n    let history = useHistory();\n\n    //gets the companies from the DB and dispatches it to the store \n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getAllCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n\n        let unSubscribeMe = store.subscribe(() => {\n            setCompanies(store.getState().companyState.companies);\n        })\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n        // if companyState.companies is empty get the list of companies\n        else if (store.getState().companyState.companies.length === 0) {\n            getCompanies();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, []);\n\n\n    // delete function: \n    /**\n     * Passed on to the company card.\n     * Deletes the company from the DB and update the store\n     */\n    let handleDelete = async (company: CompanyModel) => {\n        try {\n            await jwtAxios.delete<number>(globals.urls.deleteCompany + company.id);\n            console.log(company.id);\n            console.log(company.name);\n            store.dispatch(companyDeletedAction(company.id));\n            notify.success(\"Company \" + company.name + \" deleted.\");\n            history.push(\"/admin/delete/company\")\n        } catch (error) {\n            notify.error(error);\n        }\n\n    }\n\n    return (\n        <div className=\"DeleteCompany Scroller\">\n\n            {companies.map((c) =>\n                <CompanyCard myFunction={handleDelete} children={<Delete />} company={c} key={c.id} />\n            )}\n\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default DeleteCompany;\n\n\n\n\n\n\n","import { Card, CardHeader, IconButton } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport \"./CustomerCard.css\";\n\ninterface CustomerCardProps {\n    customer: CustomerModel;\n    children: ReactNode;\n    myFunction: Function;\n}\n\n/**\n * this card show details about the given customer\n */\nfunction CustomerCard(props: CustomerCardProps): JSX.Element {\n    return (\n        <div className=\"CustomerCard\">\n\n            <Card key={props.customer.id} >\n                <CardHeader action={\n                    <IconButton onClick={() => props.myFunction(props.customer)\n                    }> {props.children} </IconButton>\n                }\n                    title={props.customer.firstName+\" \"+props.customer.lastName}\n                    subheader={\"Contact info: \" + props.customer.email} />\n            </Card>\n\n        </div>\n    );\n}\n\nexport default CustomerCard;\n","import { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { customerDeletedAction, customersDownloadedAction } from \"../../../../Redux/CustomerState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport CustomerCard from \"../CustomerCard/CustomerCard\";\nimport \"./DeleteCustomer.css\";\nimport { NavLink } from \"react-router-dom\";\n\n/**\n * Displays all the customers and let you chose which company you want to delete\n */\nfunction DeleteCustomer(): JSX.Element {\n\n    let [customers, setCustomers] = useState<CustomerModel[]>(store.getState().customerState.customers);\n\n    let history = useHistory();\n    //gets the customers from the DB and dispatches it to the store \n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getAllCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n\n        let unSubscribeMe = store.subscribe(() => {\n            setCustomers(store.getState().customerState.customers);\n        })\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n         // if customerState.customers is empty get the list of companies\n        else if (store.getState().customerState.customers.length === 0) {\n            getCustomers();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, []);\n\n    // delete function: \n    /**\n     * Passed on to the customer card.\n     * Deletes the customer from the DB and update the store\n     */\n    let handleDelete = async (customer: CustomerModel) => {\n        try {\n            await jwtAxios.delete<number>(globals.urls.deleteCustomer + customer.id);\n            store.dispatch(customerDeletedAction(customer.id));\n            notify.success(\"Customer \" + customer.firstName + \" deleted.\");\n            history.push(\"/admin/delete/customer\")\n        } catch (error) {\n            notify.error(error);\n        }\n\n    }\n\n    return (\n        <div className=\"DeleteCustomer Scroller\">\n            {customers.map((c) =>\n                <CustomerCard myFunction={handleDelete} children={<Delete />} customer={c} key={c.id} />\n            )}\n\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default DeleteCustomer;\n","import { Button } from \"@material-ui/core\";\nimport { Build } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport \"./UpdateCompany.css\";\n\ninterface UpdateCompanyProps {\n    company:CompanyModel;\n\t\n}\n\n/**\n * Displays all the companies and let you chose which company you want to update\n */\nfunction UpdateCompany(props: UpdateCompanyProps): JSX.Element {\n\n\n    let [companies, setCompanies] = useState<CompanyModel[]>(store.getState().companyState.companies);\n\n    let history = useHistory();\n\n    //gets the companies from the DB and dispatches it to the store \n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getAllCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n\n        let unSubscribeMe = store.subscribe(() => {\n            setCompanies(store.getState().companyState.companies);\n        })\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n        // if companyState.companies is empty get the list of companies\n        else if (store.getState().companyState.companies.length === 0) {\n            getCompanies();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, []);\n\n\n    let goToForm = (company: CompanyModel) => {\n        history.push(\"/admin/update/company/\" + company.id);\n    }\n\n\n    return (\n        <div className=\"UpdateCompany Scroller\">\n\t\t\t\n            {companies.map((c) =>\n                <CompanyCard myFunction={goToForm} children={<Build />} company={c} key={c.id} />\n            )}\n\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default UpdateCompany;\n","import { Button, FormControl, FormHelperText, IconButton, Input, InputLabel, makeStyles } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companyUpdatedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport \"./UpdateCompanyForm.css\";\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"80%\",\n        top: \"12.5%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n\ninterface RouteParams {\n    id: string\n}\n\n/**\n * Displays a form to update the selected company, only changed values will be updated.\n */\ninterface UpdateCompanyFormProps extends RouteComponentProps<RouteParams> { }\n\nfunction UpdateCompanyForm(props: UpdateCompanyFormProps): JSX.Element {\n\n    const classes = useStyles();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n\n    let { register, handleSubmit, setValue } = useForm<CompanyModel>();\n    let history = useHistory();\n    let [company, setCompany] = useState<CompanyModel>(() =>\n        store.getState().companyState.companies.find((c) => (\n            c.id === parseInt(props.match.params.id))));\n\n    const togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    /**\n     * check if the values on the form are different from the original values,\n     * if do then change original values.\n     * @param companyToUpdate \n     */\n    const checkChanges = (companyToUpdate: CompanyModel) => {\n        if (!companyToUpdate.email) { companyToUpdate.email = company.email }\n        if (!companyToUpdate.password) { companyToUpdate.password = company.password }\n    }\n\n    /**\n     * sets the values of id and name to the current values \n     * and check if there is any change in the other values\n     * and finally sends it to the backend.\n     * @param companyToUpdate \n     */\n    const handleUpdate = async (companyToUpdate: CompanyModel) => {\n        try {\n\n            companyToUpdate.id = company.id;\n            companyToUpdate.name = company.name;\n\n            checkChanges(companyToUpdate);\n\n            let response = await jwtAxios.put<CompanyModel>(globals.urls.updateCompany, companyToUpdate);\n            let updatedCompany = response.data;\n            store.dispatch(companyUpdatedAction(updatedCompany));\n            notify.success(\"Company \" + company.name + \" has been updated updated\")\n            history.push(\"/administrator\")\n        } catch (error) {\n            notify.error(error)\n        }\n    }\n    useEffect(() => {\n        // let company: CompanyModel;\n        \n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n            // Insures a refresh does not crash the site by using a local storage\n        } else if (company === undefined) {\n            //      downloads from local storage\n            let storageCompany = localStorage.getItem(\"storage-company\");\n            if (storageCompany !== 'undefined' && storageCompany !== 'null') {\n                setCompany(JSON.parse(storageCompany));\n                console.log(\"3 \" + company);\n            }\n        } else {\n            // sends to local storage\n            localStorage.setItem(\"storage-company\", JSON.stringify(company));\n        }\n\n    })\n\n    return (\n        <div className=\"UpdateCompanyForm\">\n            {company &&\n                <form onSubmit={handleSubmit(handleUpdate)}>\n                    <br />\n                    <FormControl>\n                        <InputLabel>Email address</InputLabel>\n                        <Input id=\"email\" defaultValue={company.email} type=\"email\" {...register('email')} />\n                        <FormHelperText id=\"my-helper-text\">\n                            Current email: {company.email}\n                        </FormHelperText>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <FormControl>\n                        <InputLabel>Company password</InputLabel>\n                        <Input id=\"password\" defaultValue={company.password} type={passwordShown ? \"text\" : \"password\"} {...register('password')} inputProps={{ minLength: 3, maxLength: 15 }} />\n                        <IconButton className={classes.root} onClick={togglePasswordVisiblity} >{<VisibilityIcon />}</IconButton>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n                </form>\n            }\n\n            <br />\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default UpdateCompanyForm;\n","import { Button } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { Build } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { customersDownloadedAction } from \"../../../../Redux/CustomerState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport CustomerCard from \"../CustomerCard/CustomerCard\";\nimport \"./UpdateCustomer.css\";\n\ninterface UpdateCustomerProps {\n    customer: CustomerModel;\n}\n\n/**\n * Displays all the customers and let you chose which customer you want to update\n */\nfunction UpdateCustomer(props: UpdateCustomerProps): JSX.Element {\n\n\n    let [customers, setCustomers] = useState<CustomerModel[]>(store.getState().customerState.customers);\n\n    let history = useHistory();\n\n    //gets the customers from the DB and dispatches it to the store \n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getAllCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n\n        let unSubscribeMe = store.subscribe(() => {\n            setCustomers(store.getState().customerState.customers);\n        })\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please login\")\n            history.push(\"/login/admin\");\n        }\n          // if customerState.customers is empty get the list of customers\n        else if (store.getState().customerState.customers.length === 0) {\n            getCustomers();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, []);\n\n    let goToForm = (customer: CustomerModel) => {\n        history.push(\"/admin/update/customer/\" + customer.id);\n    }\n\n    return (\n        <div className=\"UpdateCustomer Scroller\">\n\n            {customers.map((c) =>\n                <CustomerCard myFunction={goToForm} children={<Build />} customer={c} key={c.id} />\n            )}\n\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default UpdateCustomer;\n","import { Button, FormControl, makeStyles, Input, InputLabel, IconButton } from \"@material-ui/core\";\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport { useEffect, useState } from \"react\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { customerUpdatedAction } from \"../../../../Redux/CustomerState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport \"./UpdateCustomerForm.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { ClientType } from \"../../../../Models/UserModel\";\n\n\ninterface RouteParams {\n    id: string\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"80%\",\n        top: \"12.5%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n\ninterface UpdateCustomerFormProps extends RouteComponentProps<RouteParams> { }\n\n/**\n * Displays a form to update the selected customer, only changed values will be updated.\n */\nfunction UpdateCustomerForm(props: UpdateCustomerFormProps): JSX.Element {\n\n    let { register, handleSubmit } = useForm<CustomerModel>();\n    let history = useHistory();\n\n    const classes = useStyles();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    let [customer, setCustomer] = useState<CustomerModel>(() =>\n        store.getState().customerState.customers.find((c) => (\n            c.id === parseInt(props.match.params.id))));\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\")\n            // Insures a refresh does not crash the site by using a local storage\n            // downloads from local storage\n        } else if (customer === undefined) {\n            let storageCustomer = localStorage.getItem(\"storage-customer\");\n            if (storageCustomer !== 'undefined' && storageCustomer !== 'null') {\n                setCustomer(JSON.parse(storageCustomer));\n            }\n        } else {\n            // sends to local storage\n            localStorage.setItem(\"storage-customer\", JSON.stringify(customer));\n        }\n    })\n\n    /**\n    * check if the values on the form are different from the original values,\n    * if do then change original values.\n    * @param customerToUpdate \n    */\n    function checkChanges(customerToUpdate: CustomerModel) {\n        if (!customerToUpdate.email) { customerToUpdate.email = customer.email }\n        if (!customerToUpdate.firstName) { customerToUpdate.firstName = customer.firstName }\n        if (!customerToUpdate.lastName) { customerToUpdate.lastName = customer.lastName }\n        if (!customerToUpdate.password) { customerToUpdate.password = customer.password }\n    }\n\n    /**\n   * sets the value of id  to the current value\n   * and check if there is any change in the other values\n   * and finally sends it to the backend.\n   * @param companyToUpdate \n   */\n    let handleUpdate = async (customerToUpdate: CustomerModel) => {\n        try {\n            customerToUpdate.id = customer.id;\n\n            checkChanges(customerToUpdate);\n\n            let response = await jwtAxios.put<CustomerModel>(globals.urls.updateCustomer, customerToUpdate);\n            let updatedCustomer = response.data;\n            console.log(\"updatedCustomer\");\n            console.log(updatedCustomer);\n            store.dispatch(customerUpdatedAction(updatedCustomer));\n            notify.success(updatedCustomer.firstName + \" has been updated\");\n            history.push(\"/administrator\")\n        } catch (error) {\n            notify.error(error)\n        }\n    }\n\n    return (\n        <div className=\"UpdateCustomerForm\">\n            {customer &&\n                <form onSubmit={handleSubmit(handleUpdate)}>\n                    <br />\n                    <FormControl>\n                        <InputLabel>First Name</InputLabel>\n                        <Input id=\"firstName\" defaultValue={customer.firstName} type=\"text\" {...register('firstName')} inputProps={{ minLength: 3, maxLength: 20 }} />\n                    </FormControl>\n                    <br />\n                    <br />\n                    <FormControl>\n                        <InputLabel>Last Name</InputLabel>\n                        <Input id=\"lastName\" defaultValue={customer.lastName} type=\"text\" {...register('lastName')} inputProps={{ minLength: 3, maxLength: 20 }} />\n                    </FormControl>\n                    <br />\n                    <br />\n                    <FormControl>\n                        <InputLabel>Email address</InputLabel>\n                        <Input id=\"email\" defaultValue={customer.email} type=\"email\" {...register('email')} />\n                    </FormControl>\n                    <br />\n                    <br />\n                    <FormControl>\n                        <InputLabel >Customer password</InputLabel>\n                        <Input id=\"password\" defaultValue={customer.password} type={passwordShown ? \"text\" : \"password\"} {...register('password')} inputProps={{ minLength: 3, maxLength: 15 }} />\n                        <IconButton className={classes.root} onClick={togglePasswordVisiblity} >{<VisibilityIcon />}</IconButton>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n                </form>\n            }\n            <br />\n            <br />\n            <br />\n            <NavLink to=\"/administrator\">\n                <Button variant=\"contained\" color=\"primary\"  > Back</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default UpdateCustomerForm;\n","import CompanyModel from \"./CompanyModel\";\r\n\r\nexport enum Category{\r\n    FOOD=\"FOOD\", ELECTRICITY=\"ELECTRICITY\", RESTAURANT=\"RESTAURANT\", VACATION=\"VACATION\"\r\n}\r\n\r\nclass CouponModel{\r\n    public id: number;\r\n    public category: Category;\r\n    public title: string;\r\n    public description: string;\r\n    public startDate: Date;\r\n    public endDate: Date;\r\n    public amount: number;\r\n    public price:number;\r\n    public image:FileList;\r\n    public company:CompanyModel;\r\n    public imageName: string;\r\n    public token: string;\r\n}\r\n\r\nexport default CouponModel;","import { Button, FormControl, Input, InputLabel, makeStyles, MenuItem, Select } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport { useHistory } from \"react-router\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponAddedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport \"./AddCoupon.css\";\nimport { NavLink } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    dates: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n/**\n *Displays a form to the company to add a new coupon .\n */\nfunction AddCoupon(): JSX.Element {\n\n    const classes = useStyles();\n\n    const [value, setValue] = useState('')\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(event.target.value as Category);\n    };\n\n    let { register, handleSubmit } = useForm<CouponModel>();\n    let history = useHistory();\n\n    useEffect(() => {\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please login\")\n            history.push(\"/login/company\");\n        }\n    });\n\n    /**\n     * Receives the coupon data from the form. The function then sends the coupon\n     * as FormData to the server.\n     * @param coupon \n     */\n    async function send(coupon: CouponModel) {\n        try {\n            const myFormData = new FormData();\n\n            myFormData.append(\"amount\", coupon.amount.toString());\n            myFormData.append(\"category\", coupon.category.toString());\n            myFormData.append(\"description\", coupon.description);\n            myFormData.append(\"endDate\", new Date(coupon.endDate).toISOString().split(\"T\")[0]);\n\n            myFormData.append(\"price\", coupon.price.toString());\n            myFormData.append(\"startDate\", new Date(coupon.startDate).toISOString().split(\"T\")[0]);\n            myFormData.append(\"title\", coupon.title);\n            myFormData.append(\"image\", coupon.image.item(0));\n\n\n            let response = await jwtAxios.post<CouponModel>(globals.urls.addCoupon, myFormData);\n            const addedCoupon = response.data;\n            store.dispatch(couponAddedAction(addedCoupon));\n\n            notify.success(\"Coupon \" + addedCoupon.title + \" added\")\n            setTimeout(() => {\n                history.push(\"/company\");\n            }, 1500);\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    return (\n        <div className=\"AddCoupon\">\n            <div className=\" \">\n                <form encType=\"multipart/form-data\" onSubmit={handleSubmit(send)}>\n                    <FormControl>\n                        <InputLabel >Coupon title</InputLabel>\n                        <Input required id=\"title\" type=\"text\"  {...register('title')} inputProps={{maxLength:20}}/>\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.dates}>\n                        <InputLabel >Coupon category</InputLabel>\n                        <Select {...register('category')} labelId=\"labelIdCategories\" required id=\"categoriesId\" value={value} onChange={handleChange}>\n                            <MenuItem value={Category.FOOD} >Food</MenuItem>\n                            <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                            <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                            <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Coupon description</InputLabel>\n                        <Input required id=\"description\" type=\"text\"  {...register('description')} />\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.dates}>\n                        <InputLabel shrink >Coupon start date</InputLabel>\n                        <Input required id=\"startDate\" type=\"date\" {...register('startDate')} />\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.dates}>\n                        <InputLabel shrink >Coupon end date</InputLabel>\n                        <Input required id=\"endDate\" type=\"date\"  {...register('endDate')} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Coupon amount</InputLabel>\n                        <Input required id=\"amount\" type=\"number\" inputProps={{min:1}} {...register('amount')} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Coupon price</InputLabel>\n                        <Input required id=\"price\" type=\"number\" inputProps={{min:0, step:\"0.01\"}} {...register('price')} />\n                    </FormControl>\n                    <br />\n                    <br />\n                    <FormControl>\n                        <Button size=\"small\" variant=\"contained\" component=\"label\"> Upload Picture\n                            <input hidden type=\"file\" name=\"image\" {...register('image')} accept=\"image/*\" />\n                        </Button>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n                    &nbsp;\n                    <NavLink to=\"/company\">\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"  > Back</Button>\n                    </NavLink>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default AddCoupon;\n","import { Button, makeStyles, InputLabel, FormControl, MenuItem, Input, Select } from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponDeletedAction, couponsDownloadedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport CouponCard from \"../../../CouponsArea/CouponCard/CouponCard\";\nimport OperationCard from \"../../OperationCard/OperationCard\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport \"./CompanyDisplay.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    dates: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n/**\n * Displays the company coupons and the available operation for each coupon\n */\nfunction CompanyDisplay(): JSX.Element {\n\n    type formDetails = { category: Category, maxPrice: number }\n    let [details, setDetails] = useState<formDetails>(null);\n\n    const classes = useStyles();\n    let history = useHistory();\n    let [coupons, setCoupons] = useState<CouponModel[]>();\n\n    let [couponsFetched, setCouponsFetched] = useState<boolean>(false);\n\n    let [categoryValue, setCategoryValue] = useState(null);\n    let [priceValue, setPriceValue] = useState(null);\n\n    let { register, handleSubmit } = useForm<formDetails>();\n\n    //gets the coupons from the DB and dispatches it to the store\n    //set the CouponsFetched to true to insure that the func works only 1 time at the first render\n    async function getCoupons() {\n        try {\n            let response = await jwtAxios.get<CouponModel[]>(globals.urls.getAllCoupons);\n            store.dispatch(couponsDownloadedAction(response.data));\n            setCouponsFetched(true);\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCoupons(store.getState().couponsState.coupons);\n        })\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please login\")\n            history.push(\"/login/company\");\n        } else if (!couponsFetched) {\n            getCoupons();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, []);\n\n    /**\n     * deletes the selected coupon by sending the coupon id to the server\n     * @param coupon \n     */\n    let handleDelete = async (coupon: CouponModel) => {\n        try {\n            await jwtAxios.delete<number>(globals.urls.deleteCoupon + coupon.id);\n            store.dispatch(couponDeletedAction(coupon.id));\n            notify.success(\"Coupon \" + coupon.id + \" deleted.\");\n            history.push(\"/company\")\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n\n    function goToUpdateForm(id: string) {\n        history.push(\"/company/update/coupon/\" + id)\n    }\n\n    useEffect(() => {\n        //if we don't have a user object er are not logged in\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please login\")\n            history.push(\"/login/company\");\n        }\n    });\n\n    function send(details: formDetails) {\n        setDetails(details);\n    }\n\n    const handleChangeCategory = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategoryValue(event.target.value as Category);\n    };\n    const handleChangePrice = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setPriceValue(event.target.value as number);\n    };\n\n    const clearSelection = () => {\n        setCategoryValue(null);\n        setPriceValue(null);\n        setDetails(null);\n    }\n\n    /**\n     * Filters the coupons based on category & price\n     * @returns CouponModel[]\n     */\n    const showCoupons = (): CouponModel[] => {\n        let myCoupons = coupons;\n        if (details?.category !== undefined && details?.maxPrice !== undefined) {\n            myCoupons = coupons.filter((c) =>\n                (c.price <= details.maxPrice && c.category === details.category));\n        }\n        return myCoupons;\n    }\n\n    return (\n        <div className=\"CompanyDisplay Scroller\">\n            <NavLink className=\"addCoupon\" to=\"/company/add/coupon\"><OperationCard operation=\"Add Coupon\" /></NavLink>\n            <br />\n            <NavLink className=\"homeButton\" to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"outlined\">Home</Button>\n            </NavLink>\n            <br />\n      \n            <form className=\"mySearch\" onSubmit={handleSubmit(send)}>\n                <FormControl className={classes.dates}>\n                    <InputLabel>Coupon category</InputLabel>\n                    <Select required {...register('category')} labelId=\"labelIdCategories\" id=\"categoriesId\" value={!categoryValue ? \"\" : categoryValue} onChange={handleChangeCategory}>\n                        <MenuItem value={null} >-</MenuItem>\n                        <MenuItem value={Category.FOOD} >Food</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                        <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                        <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                    </Select>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel >Coupon price</InputLabel>\n                    <Input required id=\"price\" type=\"number\" value={!priceValue ? \"\" : priceValue} {...register('maxPrice')} onChange={handleChangePrice} />\n                </FormControl>\n\n                <br />\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" type=\"submit\" startIcon={<SearchIcon />}> Search</Button>\n                &nbsp;\n                <Button variant=\"contained\" size=\"small\" onClick={clearSelection} startIcon={<DeleteIcon />}> Clear</Button>\n            </form>\n\n\n            {coupons && showCoupons().map((c) => (<CouponCard key={c.id} coupon={c} myDeleteFunction={handleDelete} myUpdateFunction={goToUpdateForm} />))}\n            <br />\n\n\n\n            <br />\n        </div>\n    );\n}\n\nexport default CompanyDisplay;\n","import { Button, FormControl, Input, InputLabel, makeStyles, MenuItem, Select } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponUpdatedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../services/Globals\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport notify from \"../../../../services/Notifications\";\nimport \"./UpdateCouponform.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    dates: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface UpdateCouponformProps extends RouteComponentProps<RouteParams> { }\n\n/**\n * Displays a form to update the selected coupon, only changed values will be updated.\n */\nfunction UpdateCouponform(props: UpdateCouponformProps): JSX.Element {\n\n    let { register, handleSubmit } = useForm<CouponModel>();\n    let history = useHistory();\n    const classes = useStyles();\n\n    const [value, setValue] = useState('')\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(event.target.value as Category);\n    };\n\n    let [coupon, setCoupon] = useState<CouponModel>(() =>\n        store.getState().couponsState.coupons.find((c) => (\n            c.id === parseInt(props.match.params.id))));\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/company\")\n        } else {\n            //      downloads from local storage\n            if (coupon === undefined) {\n                let storageCoupon = localStorage.getItem(\"storage-coupon\");\n                if (storageCoupon !== 'undefined' && storageCoupon !== 'null') {\n                    setCoupon(JSON.parse(storageCoupon));\n                }\n            } else {\n                // sends to local storage\n                localStorage.setItem(\"storage-coupon\", JSON.stringify(coupon));\n            }\n        }\n    })\n    /**\n     * check if the values on the form are different from the original values,\n     * if do then change original values.\n     * @param couponToUpdate \n     */\n    const checkChanges = (couponToUpdate: CouponModel) => {\n\n        if (!couponToUpdate.title?.trim()) {\n            couponToUpdate.title = coupon.title\n        }\n        if (!couponToUpdate.category) {\n            couponToUpdate.category = coupon.category\n        }\n        if (!couponToUpdate.description) {\n            couponToUpdate.description = coupon.description\n        }\n        if (!couponToUpdate.startDate) {\n            couponToUpdate.startDate = coupon.startDate\n        }\n        if (!couponToUpdate.endDate) {\n            console.log(coupon.endDate);\n            \n            couponToUpdate.endDate = coupon.endDate\n        }\n        if (!couponToUpdate.amount) {\n            couponToUpdate.amount = coupon.amount\n        }\n        if (!couponToUpdate.price) {\n            couponToUpdate.price = coupon.price\n        }\n        if (!couponToUpdate.image.item(0)) {\n            couponToUpdate.imageName = coupon.imageName\n        }\n\n    }\n\n    /**\n     * Validates the dates before sending them to the server.\n     * @param couponToUpdate\n     * @returns true if dates are validated, false if they are not.\n     */\n    const validateDates = (couponToUpdate: CouponModel): boolean => {\n        // console.log(\"new Date: \"+couponToUpdate.endDate.getMilliseconds());\n        // if (couponToUpdate.endDate < new Date().toString()) {\n        //     notify.error(\"End date can not be in the past. comes from the front, Alon!\")\n        //     return false\n        // }\n        if (couponToUpdate.startDate > couponToUpdate.endDate) {\n            notify.error(\"The expiration date of coupon can not start before start date\")\n            return false\n        }\n        return true\n    }\n\n    /**\n     * Receives the coupon data from the form. The function then makes sure that the \n     * fields are validated before sending the coupon to be updated as FormData to the server.\n     * @param couponToUpdate \n     */\n    const handleUpdate = async (couponToUpdate: CouponModel) => {\n        try {\n            checkChanges(couponToUpdate)\n            \n            if (validateDates(couponToUpdate)) {\n                couponToUpdate.id = coupon.id;\n                couponToUpdate.company = coupon.company;\n\n\n                const myFormData = new FormData();\n\n                myFormData.append(\"id\", couponToUpdate.id.toString());\n                myFormData.append(\"amount\", couponToUpdate.amount.toString());\n                myFormData.append(\"category\", couponToUpdate.category.toString());\n                myFormData.append(\"description\", couponToUpdate.description);\n                myFormData.append(\"endDate\", new Date(couponToUpdate.endDate).toISOString().split(\"T\")[0]);\n                myFormData.append(\"price\", couponToUpdate.price.toString());\n                myFormData.append(\"startDate\", new Date(couponToUpdate.startDate).toISOString().split(\"T\")[0]);\n                myFormData.append(\"title\", couponToUpdate.title);\n                myFormData.append(\"image\", couponToUpdate.image.item(0));\n\n                let response = await jwtAxios.put<CouponModel>(globals.urls.updateCoupon, myFormData);\n                let updatedCoupon = response.data;\n                console.log(\"updatedCoupon\");\n                console.log(updatedCoupon);\n                store.dispatch(couponUpdatedAction(updatedCoupon));\n                notify.success(updatedCoupon.title + \" has been updated\");\n                setTimeout(() => {\n                    history.push(\"/company\")\n                }, 1500);\n            }\n        } catch (error) {\n            notify.error(error)\n        }\n    }\n\n    return (\n        <div className=\"UpdateCouponform\">\n            <div className=\" \">\n                {coupon &&\n                    <form onSubmit={handleSubmit(handleUpdate)}>\n                        <FormControl>\n                            <InputLabel >Coupon title</InputLabel>\n                            <Input id=\"title\" defaultValue={coupon.title} type=\"text\" {...register('title')} inputProps={{ maxLength: 20 }} />\n                        </FormControl>\n                        <br />\n                        <FormControl className={classes.dates}>\n                            <InputLabel htmlFor=\"my-input\">Coupon category</InputLabel>\n                            <Select  {...register('category')} labelId=\"labelIdCategories\" id=\"categoriesId\" value={!value ? coupon.category : value} onChange={handleChange}>\n                                <MenuItem value={Category.FOOD} >Food</MenuItem>\n                                <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                                <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                                <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Coupon description</InputLabel>\n                            <Input id=\"description\" type=\"text\" {...register('description')} />\n                        </FormControl>\n                        <br />\n                        <FormControl className={classes.dates}>\n                            <InputLabel shrink >Coupon start date</InputLabel>\n                            <Input id=\"startDate\" defaultValue={coupon.startDate} type=\"date\" {...register('startDate')} />\n                        </FormControl>\n                        <br />\n                        <FormControl className={classes.dates}>\n                            <InputLabel shrink >Coupon end date</InputLabel>\n                            <Input id=\"endDate\" type=\"date\" defaultValue={coupon.endDate} {...register('endDate')} />\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Coupon amount</InputLabel>\n                            <Input id=\"amount\" defaultValue={coupon.amount} type=\"number\" inputProps={{ min: 1 }} {...register('amount')} />\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Coupon price</InputLabel>\n                            <Input id=\"price\" defaultValue={coupon.price} type=\"number\" inputProps={{ min: 0, step: \"0.01\" }} {...register('price')} />\n                        </FormControl>\n                        <br />\n                        <br />\n                        <FormControl>\n                            <Button size=\"small\" variant=\"contained\" component=\"label\"> Upload Picture\n                                <input hidden type=\"file\" name=\"image\" {...register('image')} accept=\"image/*\" />\n                            </Button>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <Button variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" startIcon={<SaveIcon />}> save</Button>\n                        &nbsp;\n                        <NavLink to=\"/company\">\n                            <Button variant=\"contained\" size=\"large\" > Back</Button>\n                        </NavLink>\n                    </form>\n                }\n            </div>\n\n        </div>\n    );\n}\n\nexport default UpdateCouponform;\n","import { Button, makeStyles, InputLabel, FormControl, MenuItem, Input, Select } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { Home } from \"@material-ui/icons\";\nimport \"./CustomerDisplay.css\";\nimport store from \"../../../../Redux/Store\";\nimport jwtAxios from \"../../../../services/JwtAxios\";\nimport globals from \"../../../../services/Globals\";\nimport notify from \"../../../../services/Notifications\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport CouponCard from \"../../../CouponsArea/CouponCard/CouponCard\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { useForm } from \"react-hook-form\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { customerAddedAction } from \"../../../../Redux/CustomerState\";\nimport { couponAddedAction } from \"../../../../Redux/CouponsState\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    dates: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n/**\n * Displays the coupons bought by the customer\n */\nfunction CustomerDisplay(): JSX.Element {\n    type formDetails = { category: Category, maxPrice: number }\n\n    const classes = useStyles();\n\n    let history = useHistory();\n    let [customerFetched, setCustomerFetched] = useState<boolean>(false);\n    let [customer, setCustomer] = useState<CustomerModel>();\n    let [details, setDetails] = useState<formDetails>(null);\n    const [categoryValue, setCategoryValue] = useState(null);\n    const [priceValue, setPriceValue] = useState(null);\n\n    let { register, handleSubmit } = useForm<formDetails>();\n\n\n    /**\n     * gets the customer details from the DB, sets the customer state, coupons and dispatches it to the store.\n     * \n     */\n    async function getCustomer() {\n        try {\n            let response = await jwtAxios.get<CustomerModel>(globals.urls.getCustomerDetails);\n            setCustomer(response.data)\n            store.dispatch(customerAddedAction(response.data));\n            customer?.coupons.forEach(coupon =>\n                store.dispatch(couponAddedAction(coupon))\n            )\n            setCustomerFetched(true); //insure that we make only one request to the server(to get the customer)\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.CUSTOMER) {\n            notify.error(\"Please login\")\n            history.push(\"/login/customer\");\n        }\n        else if (!customerFetched) {\n            getCustomer();\n        }\n    }, [customer]);\n\n    const handleChangeCategory = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategoryValue(event.target.value as Category);\n    };\n    const handleChangePrice = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setPriceValue(event.target.value as number);\n    };\n\n    function send(details: formDetails) {\n        setDetails(details);\n    }\n\n    const clearSelection = () => {\n        setCategoryValue(null);\n        setPriceValue(null);\n        setDetails(null);\n    }\n\n    /**\n     * Filters the coupons based on category & price\n     * @returns CouponModel[]\n     */\n    const showCoupons = (): CouponModel[] => {\n        let myCoupons = customer.coupons;\n        if (details?.category !== undefined && details?.maxPrice !== undefined) {\n            myCoupons = customer.coupons.filter((c) =>\n                (c.price <= details.maxPrice && c.category === details.category));\n        }\n        return myCoupons;\n    }\n\n    return (\n        <div className=\"CustomerDisplay Scroller\">\n            <NavLink className=\"homeButton\" to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"outlined\">Home</Button>\n            </NavLink>\n            <br />\n\n\n            <form className=\"mySearch\" onSubmit={handleSubmit(send)}>\n                <FormControl className={classes.dates}>\n                    <InputLabel>Coupon category</InputLabel>\n                    <Select required {...register('category')} labelId=\"labelIdCategories\" id=\"categoriesId\" value={!categoryValue ? \"\" : categoryValue} onChange={handleChangeCategory}>\n                        <MenuItem value={null} >-</MenuItem>\n                        <MenuItem value={Category.FOOD} >Food</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                        <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                        <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                    </Select>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel >Coupon price</InputLabel>\n                    <Input required id=\"price\" type=\"number\" value={!priceValue ? \"\" : priceValue} {...register('maxPrice')} onChange={handleChangePrice} />\n                </FormControl>\n\n                <br />\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" type=\"submit\" startIcon={<SearchIcon />}> Search</Button>\n                &nbsp;\n                <Button variant=\"contained\" size=\"small\" onClick={clearSelection} startIcon={<DeleteIcon />}> Clear</Button>\n            </form>\n\n\n            {customer?.coupons && showCoupons().map((c) =>\n                <CouponCard key={c.id} coupon={c} />\n            )}\n            <br />\n        </div>\n    );\n}\n\nexport default CustomerDisplay;\n","import { Typography } from \"@material-ui/core\";\nimport \"./Page404.css\";\n\nfunction Page404(): JSX.Element {\n    return (\n        <div className=\"Page404\">\n\t\t\t<Typography variant=\"h5\">Ohhh you are in our 404 page... try other address</Typography>\n        </div>\n    );\n}\n\nexport default Page404;\n","import { ReactNode } from \"react\";\nimport { Card, CardHeader } from \"@material-ui/core\";\nimport CouponModel, { Category } from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\n\nimport \"./CategoryCard.css\";\n\ninterface CategoryCardProps {\n    category: Category;\n    children: ReactNode;\n}\n\n/**\n * Displays a crad according to the category\n * @param props \n * @returns \n */\nfunction CategoryCard(props: CategoryCardProps): JSX.Element {\n\n     /**\n     * make each word began with capital letter\n     * @param categoryName \n     * @returns string\n     */\n    function niceString(categoryName: string): string {\n        categoryName = categoryName.toLowerCase();\n        categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n        categoryName = categoryName.replace('_', ' ')\n        let words = categoryName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n    }\n\n    function hey(): CouponModel[] {\n        if (store.getState().authState.user?.clientType === ClientType.CUSTOMER) {\n            let usr = store.getState().authState.user;\n            let currentUser = store.getState().customerState.customers.find(c => c.id === usr.id)\n            if (currentUser !== undefined)\n                return currentUser.coupons;\n            return [];\n        }\n    }\n    return (\n        <div className=\"CategoryCard \">\n\n            <Card style={{backgroundColor: \"Gold\"}}>\n                <CardHeader title={props.children} subheader={niceString(props.category)} />\n            </Card>\n\n        </div>\n    );\n}\n\nexport default CategoryCard;\n","import { Power, Restaurant, CardTravelTwoTone, FastfoodTwoTone } from \"@material-ui/icons\";\nimport { Component } from \"react\";\nimport { Category } from \"../../../Models/CouponModel\";\nimport { NavLink } from \"react-router-dom\";\nimport CategoryCard from \"../../CouponsArea/CategoryCard/CategoryCard\";\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Home Scroller\">\n                <NavLink to={\"/coupons/category/\" + Category.ELECTRICITY} exact>\n                    <CategoryCard category={Category.ELECTRICITY}>\n                        <Power />\n                    </CategoryCard>\n                </NavLink>\n                <NavLink to={\"/coupons/category/\" + Category.FOOD} exact>\n                    <CategoryCard category={Category.FOOD}>\n                        <FastfoodTwoTone />\n                    </CategoryCard>\n                </NavLink>\n                <NavLink to={\"/coupons/category/\" + Category.RESTAURANT} exact>\n                    <CategoryCard category={Category.RESTAURANT}>\n                        <Restaurant />\n                    </CategoryCard>\n                </NavLink>\n                <NavLink to={\"/coupons/category/\" + Category.VACATION} exact>\n                    <CategoryCard category={Category.VACATION}>\n                        <CardTravelTwoTone />\n                    </CategoryCard>\n                </NavLink>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import {  Redirect, Route, Switch } from \"react-router-dom\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport Login from \"../../AuthArea/Login/Login\";\nimport Logout from \"../../AuthArea/Logout/Logout\";\nimport CategoryCoupons from \"../../CouponsArea/CategoryCoupons/CategoryCoupons\";\nimport FullCouponDetails from \"../../CouponsArea/FullCouponDetails/FullCouponDetails\";\nimport AddCompany from \"../../DisplayArea/Admin/AddCompany/AddCompany\";\nimport AddCustomer from \"../../DisplayArea/Admin/AddCustomer/AddCustomer\";\nimport AdminDisplay from \"../../DisplayArea/Admin/AdminDisplay/AdminDisplay\";\nimport DeleteCompany from \"../../DisplayArea/Admin/DeleteCompany/DeleteCompany\";\nimport DeleteCustomer from \"../../DisplayArea/Admin/DeleteCustomer/DeleteCustomer\";\nimport UpdateCompany from \"../../DisplayArea/Admin/UpdateCompany/UpdateCompany\";\nimport UpdateCompanyForm from \"../../DisplayArea/Admin/UpdateCompanyForm/UpdateCompanyForm\";\nimport UpdateCustomer from \"../../DisplayArea/Admin/UpdateCustomer/UpdateCustomer\";\nimport UpdateCustomerForm from \"../../DisplayArea/Admin/UpdateCustomerForm/UpdateCustomerForm\";\nimport AddCoupon from \"../../DisplayArea/Company/AddCoupon/AddCoupon\";\nimport CompanyDisplay from \"../../DisplayArea/Company/CompanyDisplay/CompanyDisplay\";\nimport UpdateCouponform from \"../../DisplayArea/Company/UpdateCouponform/UpdateCouponform\";\nimport CustomerDisplay from \"../../DisplayArea/Customer/CustomerDisplay/CustomerDisplay\";\nimport Page404 from \"../../SharedArea/Page404/Page404\";\nimport Home from \"../Home/Home\";\n\nfunction Routing(): JSX.Element {\n    return (\n        <div className=\"Routing\">\n\t\t\t<Switch>\n                <Route exact path=\"/home\" component={Home} />\n                {/* ADMINISTRATOR */}\n                <Route exact path=\"/administrator\" component={AdminDisplay} />\n                {/* admin -> company */}\n                <Route exact path=\"/admin/add/company\" component={AddCompany} />\n                <Route exact path=\"/admin/delete/company\" component={DeleteCompany} />\n                <Route exact path=\"/admin/update/company\" component={UpdateCompany} />\n                <Route exact path=\"/admin/update/company/:id\" component={UpdateCompanyForm} />\n                {/* admin -> customer */}\n                <Route exact path=\"/admin/add/customer\" component={AddCustomer} />\n                <Route exact path=\"/admin/update/customer\" component={UpdateCustomer} />\n                <Route exact path=\"/admin/delete/customer\" component={DeleteCustomer} />\n                <Route exact path=\"/admin/update/customer/:id\" component={UpdateCustomerForm} />\n\n                {/* COMPANY */}\n                <Route exact path=\"/company\" component={CompanyDisplay} />  \n                <Route exact path=\"/company/add/coupon\" component={AddCoupon} />\n                <Route exact path=\"/company/update/coupon/:id\" component={UpdateCouponform} />\n\n                {/* CUSTOMER */}\n                <Route exact path=\"/customer\" component={CustomerDisplay} />\n\n                {/* Guest */}\n                <Route exact path=\"/coupons/category/:category\" component={CategoryCoupons} />\n                <Route exact path=\"/coupons/full-details/:id\" component={FullCouponDetails} />\n\n                {/* LOGIN/LOGOUT */}\n                <Route exact path=\"/logout\" component={Logout} />\n                <Route exact path=\"/login/admin\" render={(props) => <Login type={ClientType.ADMINISTRATOR} {...props} /> } />\n                <Route exact path=\"/login/company\" render={(props) => <Login type={ClientType.COMPANY} {...props} /> } />\n                <Route exact path=\"/login/customer\" render={(props) => <Login type={ClientType.CUSTOMER} {...props} /> } />\n\n                <Redirect from =\"/\" to = \"/home\" exact/>\n                <Route component={Page404}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routing;\n","import { Component } from \"react\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Routing from \"../Routing/Routing\";\nimport \"./Layout.css\";\n\nclass Layout extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Layout\">\n                <header>\n                    <Header />\n                </header>\n                <main>\n                    <Routing/>\n                </main>\n                <footer>\n                    <Footer />\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Layout from './Components/LayoutArea/Layout/Layout';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Layout />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}